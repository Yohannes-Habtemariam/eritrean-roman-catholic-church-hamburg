{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/myProjects/eritrean-roman-catholic-church-hamburg/frontend/src/views/loginPage/Login.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { myContext } from \"../../App\";\nimport { NavLink } from \"react-router-dom\";\nimport { AiOutlineEye, AiOutlineEyeInvisible } from \"react-icons/ai\";\nimport { useNavigate } from 'react-router-dom';\nimport \"../../styles/loginPage/Login.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  // Navigate to service page\n  const navigate = useNavigate(); // State variables for the login form\n\n  const {\n    myContext\n  } = u;\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false); // Validation state variables for the login form\n\n  const [emailError, setEmailError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false); // useRef to store the email and password inputs\n\n  const emailRef = useRef();\n  const passwordRef = useRef(); // Function to check if the email is valid\n\n  const checkEmailFormat = () => {\n    const emailRegex = /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(email);\n\n    if (emailRegex) {\n      emailRef.current.className = \"errorInvisible\"; //emailRef.current.style.display = \"none\"\n    } else {\n      passwordRef.current.className = \"errorVisible\"; //passwordRef.current.style.display = \"block\"\n    }\n  }; // Function to check if the password is valid\n\n\n  const checkPasswordFormat = () => {\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(password);\n\n    if (passwordRegex) {\n      passwordRef.current.className = \"errorInvisible\"; //passwordRef.current.style.display = \"none\"\n    } else {\n      passwordRef.current.className = \"errorVisible\"; //passwordRef.current.style.display = \"block\"\n    }\n  }; // Function to update login data\n\n\n  const updateLoginData = event => {\n    switch (event.target.name) {\n      case \"email\":\n        setEmail(event.target.value);\n        setEmailError(true);\n        break;\n\n      case \"password\":\n        setPassword(event.target.value);\n        setPasswordError(true);\n        break;\n\n      case \"showPassword\":\n        setShowPassword(false);\n        break;\n\n      default:\n        break;\n    }\n  }; // Reset all the state variables\n\n\n  const resetLoginData = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n    setEmailError(false);\n    setPasswordError(false);\n  }; // Function to show/hide password\n\n\n  const displayPassword = () => {\n    setShowPassword(prevState => !prevState);\n  }; // Function to handle the login form submit\n\n\n  const handleSubmit = async event => {\n    event.preventDefault(); // Log in user\n\n    const loginUser = {\n      email: email,\n      password: password\n    }; // Settings for the fetch call\n\n    const settings = {\n      method: \"POST\",\n      body: JSON.stringify(loginUser),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }; // Fetch call to login user\n\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\", settings);\n    const data = await response.json();\n\n    try {\n      if (response.ok) {\n        console.log(data); // Reset the login form\n\n        resetLoginData(); // Navigate to the service page\n\n        navigate(\"/service\");\n      } else {\n        throw new Error(data.error);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"login-form-container\",\n    children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      className: \"login-fieldset\",\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        className: \"login-legend\",\n        children: \" Sign In \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"login-form\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            name: \"email\",\n            value: email,\n            onChange: updateLoginData,\n            onBlur: checkEmailFormat,\n            placeholder: \"Enter Email\",\n            className: \"email-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: email.trim().length === 0 && emailError ? \"errorVisible\" : \"errorInvisible\",\n            ref: emailRef,\n            children: \" Email is required\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"errorInvisible\",\n            ref: emailRef,\n            children: \" Incorrect email format! \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: showPassword ? \"text\" : \"password\",\n            name: \"password\",\n            value: password,\n            onChange: updateLoginData,\n            onBlur: checkPasswordFormat,\n            placeholder: \"Enter Password\",\n            className: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: displayPassword,\n            className: \"password-display\",\n            children: [\" \", showPassword ? /*#__PURE__*/_jsxDEV(AiOutlineEyeInvisible, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 91\n            }, this) : /*#__PURE__*/_jsxDEV(AiOutlineEye, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 118\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: password.trim().length === 0 && passwordError ? \"errorVisible\" : \"errorInvisible\",\n            ref: passwordRef,\n            children: \" Password is required\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"errorInvisible\",\n            ref: passwordRef,\n            children: \" Password must be at least 12 characters long and contain at least one uppercase letter, one lowercase letter, one number and one special character\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"keep-logged-in-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"remember-user\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"\",\n              className: \"remember-me-label\",\n              children: \"Remember Me\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forget-password\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Forgot Password?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"login-button\",\n          children: \" Submit \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"paragraph\",\n          children: [\"If you don't have an account, login with\", /*#__PURE__*/_jsxDEV(NavLink, {\n            to: \"/register\",\n            className: \"sign-up-btn\",\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"xOMq8iSp5zC7YTRyvAslEhiFKzw=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/home/user/Desktop/myProjects/eritrean-roman-catholic-church-hamburg/frontend/src/views/loginPage/Login.jsx"],"names":["React","useState","useRef","myContext","NavLink","AiOutlineEye","AiOutlineEyeInvisible","useNavigate","Login","navigate","u","email","setEmail","password","setPassword","showPassword","setShowPassword","emailError","setEmailError","passwordError","setPasswordError","emailRef","passwordRef","checkEmailFormat","emailRegex","test","current","className","checkPasswordFormat","passwordRegex","updateLoginData","event","target","name","value","resetLoginData","displayPassword","prevState","handleSubmit","preventDefault","loginUser","settings","method","body","JSON","stringify","headers","response","fetch","data","json","ok","console","log","Error","error","err","trim","length"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { myContext } from \"../../App\";\nimport { NavLink } from \"react-router-dom\";\nimport {AiOutlineEye, AiOutlineEyeInvisible} from \"react-icons/ai\";\nimport { useNavigate } from 'react-router-dom';\nimport \"../../styles/loginPage/Login.css\";\n\nconst Login = () => {\n  // Navigate to service page\n  const navigate = useNavigate();\n\n  // State variables for the login form\n  const {myContext} = u\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n\n  // Validation state variables for the login form\n  const [emailError, setEmailError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n\n  // useRef to store the email and password inputs\n  const emailRef = useRef();\n  const passwordRef = useRef();\n\n  // Function to check if the email is valid\n  const checkEmailFormat = () => {\n    const emailRegex = /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(email);\n    if (emailRegex) {\n        emailRef.current.className = \"errorInvisible\"\n          //emailRef.current.style.display = \"none\"\n    } else {\n          passwordRef.current.className = \"errorVisible\"\n          //passwordRef.current.style.display = \"block\"\n    }\n  };\n\n  // Function to check if the password is valid\n  const checkPasswordFormat = () => {\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(password);\n    if (passwordRegex) {\n        passwordRef.current.className = \"errorInvisible\"\n          //passwordRef.current.style.display = \"none\"\n    } else {\n          passwordRef.current.className = \"errorVisible\"\n          //passwordRef.current.style.display = \"block\"\n    }\n  }\n\n\n  // Function to update login data\n  const updateLoginData = (event) => {\n    switch(event.target.name) {\n      case \"email\":\n        setEmail(event.target.value);\n        setEmailError(true);\n        break;\n      case \"password\":\n        setPassword(event.target.value);\n        setPasswordError(true);\n        break;\n      case \"showPassword\":\n        setShowPassword(false);\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Reset all the state variables\n  const resetLoginData = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n    setEmailError(false);\n    setPasswordError(false);\n  }\n\n  // Function to show/hide password\n const displayPassword = () => {\n  setShowPassword(prevState => !prevState);\n }\n\n\n  // Function to handle the login form submit\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    // Log in user\n    const loginUser = {\n      email: email,\n      password: password\n    }\n\n    // Settings for the fetch call\n    const settings = {\n      method: \"POST\",\n      body: JSON.stringify(loginUser),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    // Fetch call to login user\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\", settings);\n    const data = await response.json();\n\n    try{\n      if(response.ok) {\n        console.log(data);\n        // Reset the login form\n        resetLoginData();\n        // Navigate to the service page\n        navigate(\"/service\");\n      } else {\n        throw new Error(data.error);\n      }\n    }catch(err){\n      console.log(err);\n    }\n    \n  }\n\n  return (\n    <section className=\"login-form-container\">\n      <fieldset className=\"login-fieldset\">\n        <legend className=\"login-legend\"> Sign In </legend>\n        <form className=\"login-form\" onSubmit={handleSubmit}>\n\n          <div>\n            <input\n              type=\"email\"\n              name=\"email\"\n              value={email}\n              onChange={updateLoginData}\n              onBlur={checkEmailFormat}\n              placeholder=\"Enter Email\"\n              className=\"email-input\"\n            />\n            <div className={email.trim().length === 0 && emailError ? \"errorVisible\" : \"errorInvisible\"} ref={emailRef}> Email is required</div>\n            <div className=\"errorInvisible\" ref={emailRef}> Incorrect email format! </div>\n          </div>\n          \n          <div>\n            <input\n              type={showPassword ? \"text\" : \"password\"}\n              name=\"password\"\n              value={password}\n              onChange={updateLoginData}\n              onBlur={checkPasswordFormat}\n              placeholder=\"Enter Password\"\n              className=\"password\"\n            />\n\n            <span onClick={displayPassword} className=\"password-display\"> {showPassword ? <AiOutlineEyeInvisible/> : <AiOutlineEye/>} </span>\n\n            <div className={password.trim().length === 0 && passwordError ? \"errorVisible\" : \"errorInvisible\"} ref={passwordRef} > Password is required</div>\n            <div className=\"errorInvisible\" ref={passwordRef}> Password must be at least 12 characters long and contain at least one uppercase letter, one lowercase letter, one number and one special character</div>\n          </div>\n\n          <div className=\"keep-logged-in-container\">\n            <div className=\"remember-user\">\n              <input type=\"checkbox\" />\n              <label htmlFor=\"\" className=\"remember-me-label\">\n                Remember Me\n              </label>\n            </div>\n\n            <div className=\"forget-password\">\n              <span>Forgot Password?</span>\n            </div>\n          </div>\n\n          <button className=\"login-button\"> Submit </button>\n\n          <p className=\"paragraph\">\n            If you don't have an account, login with\n            <NavLink to=\"/register\" className=\"sign-up-btn\">\n              Sign Up\n            </NavLink>\n          </p>\n        </form>\n      </fieldset>\n    </section>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}